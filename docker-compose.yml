services:
  # PostgreSQL Servisleri
  postgres_5435:
    image: postgres:latest
    container_name: "postgres_5435"
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=order-service
    volumes:
      - postgres_5435_data:/var/lib/postgresql/data

  postgres_5436:
    image: postgres:latest
    container_name: "postgres_5436"
    ports:
      - "5436:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=identity-service
    volumes:
      - postgres_5436_data:/var/lib/postgresql/data

  # MySQL Servisi
  mysql_3308:
    image: mysql:latest
    container_name: "mysql_3308"
    ports:
      - "3308:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=test
      - MYSQL_DATABASE=customer-service
    volumes:
      - mysql_3308_data:/var/lib/mysql

  # MongoDB Servisleri
  mongodb_27020:
    image: mongo
    container_name: "mongo_27020"
    ports:
      - "27020:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=test
    volumes:
      - mongodb_27020_data:/data/db
    command: mongod --auth

  mongodb_27019:
    image: mongo
    container_name: "mongo_27019"
    ports:
      - "27019:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin #docker hubdan bulabiliriz
      - MONGO_INITDB_ROOT_PASSWORD=test
    volumes:
      - mongodb_27019_data:/data/db
    command: mongod --auth

  # Kafka
  kafka:
    image: bitnami/kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - BITNAMI_DEBUG=yes
      - KAFKA_CFG_NUM_PARTITIONS=2

  # Microservices
  discovery-service:
    build: ./discovery-service
    image: turkcell-discovery-service
    container_name: discovery_service
    ports:
      - "8888:8888"
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE: "dev" #tek tek ezme işlemi yerine profil değiştik.
      - CONFIGURL: "http://config-server:8079"

  gateway-server:
    build: ./gateway-server
    image: turkcell-gateway-server
    container_name: gateway_server
    ports:
      - "8080:8080"
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE: "dev" #tek tek ezme işlemi yerine profil değiştik.
      - CONFIGURL: "http://config-server:8079"
      #- EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8888/eureka/
      #- EUREKA_INSTANCE_PREFERIPADDRESS=true
    depends_on:
      - discovery-service

  config-server:
    build: ./config-server
    image: turkcell-config-server
    container_name: config_server
    ports:
      - "8079:8079"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8079/actuator/health"] #bizim yerimize otomatize spring uygulaması healt check yapmış olur.
      interval: 10s #kaç saniyede bi çalışsın
      retries: 5 #kaç tekrar
      start_period: 10s #ilk healthcheck ne zaman atılsın
      timeout: 5s #cevap verilemzse başarısız sayılacak süredir.

  order-service:
    build: ./order-service
    image: turkcell-order-service
    container_name: order_service
    ports:
      - "8081:8081"
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE: "dev" #tek tek ezme işlemi yerine profil değiştik.
      - CONFIGURL: "http://config-server:8079"
      #buradaki ezme işlemlerine gerek kalmaması için config dosyası ortamını vermemiz yeterli olacaktır.
      #SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres_5435:5432/order-service"
      #EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8888/eureka/
      #EUREKA_INSTANCE_PREFERIPADDRESS: true
      #SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
      #SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    restart: always #hata alınca tekrar çalıştırır.
    depends_on:
      config-server:
       condition: service_healthy
      postgres_5435:
        condition: service_started
      discovery-service:
        condition: service_started
      kafka:
        condition: service_started


  cart-service:
    build: ./cart-service
    image: turkcell-cart-service
    container_name: cart-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE: "dev"
      - CONFIGURL: "http://config-server:8079"
      #SPRING_DATA_MONGODB_URI: "mongodb://admin:test@mongo_27020:27017/cart-service?authSource=admin"
      #EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8888/eureka/
      #EUREKA_INSTANCE_PREFERIPADDRESS: true
      #SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
      #SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    restart: always
    depends_on:
      mongodb_27020:
        condition: service_started
      kafka:
        condition: service_started
      discovery-service:
        condition: service_started

  product-service:
    build: ./product-service
    image: turkcell-product-service
    container_name: product_service
    ports:
      - "8083:8083"
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE: "dev" #tek tek ezme işlemi yerine profil değiştik.
      - CONFIGURL: "http://config-server:8079"
      #SPRING_DATA_MONGODB_URI: "mongodb://admin:test@mongo_27019:27017/product-service?authSource=admin"
      #EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8888/eureka/
      #EUREKA_INSTANCE_PREFERIPADDRESS: true
    depends_on:
      - mongodb_27019
      - discovery-service

  identity-service:
    build: ./identity-service
    image: turkcell-identity-service
    container_name: identity_service
    ports:
      - "8084:8084"
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE: "dev" #tek tek ezme işlemi yerine profil değiştik.
      - CONFIGURL: "http://config-server:8079"
      #SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres_5436:5432/identity-service"
      #EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8888/eureka/
      #EUREKA_INSTANCE_PREFERIPADDRESS: true
    depends_on:
      - postgres_5436
      - discovery-service

  notification-service:
    build: ./notification-service
    image: turkcell-notification-service
    container_name: notification_service
    ports:
      - "8085:8085"
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE: "dev" #tek tek ezme işlemi yerine profil değiştik.
      - CONFIGURL: "http://config-server:8079"
      #EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8888/eureka/
      #EUREKA_INSTANCE_PREFERIPADDRESS: true
    depends_on:
      - discovery-service

  customer-service:
    build: ./customer-service
    image: turkcell-customer-service
    container_name: customer_service
    ports:
      - "8086:8086"
    environment:
      - SPRING_CLOUD_CONFIG_PROFILE: "dev" #tek tek ezme işlemi yerine profil değiştik.
      - CONFIGURL: "http://config-server:8079"
      #SPRING_DATASOURCE_URL: "jdbc:mysql://mysql_3308:3306/customer-service?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Europe/Istanbul"
      #SPRING_DATASOURCE_USERNAME: root
      #SPRING_DATASOURCE_PASSWORD: test
      #EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8888/eureka/
      #EUREKA_INSTANCE_PREFERIPADDRESS: true
    depends_on:
      - mysql_3308
      - discovery-service

volumes:
  postgres_5435_data:
  postgres_5436_data:
  mysql_3308_data:
  mongodb_27019_data:
  mongodb_27020_data: